newX = c(5, 4)
newX.proj.w = newX %*% w
# Output SW, SB, SW.inv, matrix, w, sep, newX.proj.w
print("Scattered matrix within class (SW):")
print(SW)
print("Scattered matrix between classes (SB):")
print(SB)
print("Inverse of SW (SW.inv):")
print(SW.inv)
print("SW^-1 * SB (matrix):")
print(matrix)
print("Eigenvector corresponding to the largest eigenvalue (w):")
print(w)
print("Separation point (sep):")
print(sep)
print("Projection of new data point onto w (newX.proj.w):")
print(newX.proj.w)
# Define the training set
class_1_points <- matrix(c(11, 13, 8, 9, 7, 7, 15, 11, 11, 10, 9, 9, 7, 5, 3), ncol = 2, byrow = TRUE)
class_2_points <- matrix(c(7, 15, 15, 13, 14, 9, 11, 11, 9, 5, 7, 3, 3, 3), ncol = 2, byrow = TRUE)
# Points to classify
point_1 <- c(16, 2)
point_2 <- c(6, 11)
# Calculating distances using Euclidean distance function
euclidean_distance <- function(a, b) {
sqrt(sum((a - b)^2))
}
# Calculate distances for point_1
distances_1 <- sapply(1:nrow(class_1_points), function(i) euclidean_distance(point_1, class_1_points[i, ]))
distances_2 <- sapply(1:nrow(class_2_points), function(i) euclidean_distance(point_1, class_2_points[i, ]))
# Nearest neighbors for point_1
nearest_1_class <- ifelse(which.min(distances_1) <= 3, "C1", "C2")
nearest_1_index <- ifelse(which.min(distances_1) <= 3, which.min(distances_1), which.min(distances_2))
nearest_1_distance <- min(min(distances_1), min(distances_2))
# Calculate distances for point_2
distances_3 <- sapply(1:nrow(class_1_points), function(i) euclidean_distance(point_2, class_1_points[i, ]))
distances_4 <- sapply(1:nrow(class_2_points), function(i) euclidean_distance(point_2, class_2_points[i, ]))
# Nearest neighbors for point_2
nearest_2_class <- ifelse(which.min(distances_3) <= 3, "C1", "C2")
nearest_2_index <- ifelse(which.min(distances_3) <= 3, which.min(distances_3), which.min(distances_4))
nearest_2_distance <- min(min(distances_3), min(distances_4))
# Output
cat("1. 1NN-classifier:")
cat("\nPoint (16, 2) - Nearest point:", nearest_1_class, ":", nearest_1_index, "Distance:", nearest_1_distance)
cat("\nPoint (6, 11) - Nearest point:", nearest_2_class, ":", nearest_2_index, "Distance:", nearest_2_distance)
# Training set
class1_points <- matrix(c(11, 13, 8, 9, 7, 7, 15, 11, 11, 10, 9, 7, 5, 3), ncol = 2, byrow = TRUE)
class2_points <- matrix(c(7, 15, 15, 13, 14, 9, 11, 11, 9, 7, 5, 4, 3, 3), ncol = 2, byrow = TRUE)
# New points
point1 <- c(16, 2)
point2 <- c(6, 11)
# Function to calculate Euclidean distance
euclidean_distance <- function(p1, p2) {
sqrt(sum((p1 - p2)^2))
}
# kNN classifier
kNN_classifier <- function(new_point, k, class1_points, class2_points) {
distances_class1 <- apply(class1_points, 1, function(p) euclidean_distance(new_point, p))
distances_class2 <- apply(class2_points, 1, function(p) euclidean_distance(new_point, p))
combined_distances <- c(distances_class1, distances_class2)
sorted_indices <- order(combined_distances)
k_nearest_indices <- sorted_indices[1:k]
class1_count <- sum(k_nearest_indices <= length(distances_class1))
class2_count <- k - class1_count
if (class1_count > class2_count) {
return(paste0("C1:", k_nearest_indices[class1_count], " Distance: ", combined_distances[k_nearest_indices[class1_count]]))
} else {
return(paste0("C2:", k_nearest_indices[class2_count - k + length(distances_class1)], " Distance: ", combined_distances[k_nearest_indices[class2_count - k + length(distances_class1)]]))
}
}
# Distance-weighted (inversely quadratic) voting kNN classifier
weighted_kNN_classifier <- function(new_point, k, class1_points, class2_points) {
distances_class1 <- apply(class1_points, 1, function(p) 1 / euclidean_distance(new_point, p)^2)
distances_class2 <- apply(class2_points, 1, function(p) 1 / euclidean_distance(new_point, p)^2)
combined_distances <- c(distances_class1, distances_class2)
sorted_indices <- order(combined_distances, decreasing = TRUE)
k_nearest_indices <- sorted_indices[1:k]
class1_count <- sum(k_nearest_indices <= length(distances_class1))
class2_count <- k - class1_count
if (class1_count > class2_count) {
return(paste0("C1:", k_nearest_indices[class1_count], " Weighted Distance: ", combined_distances[k_nearest_indices[class1_count]]))
} else {
return(paste0("C2:", k_nearest_indices[class2_count - k + length(distances_class1)], " Weighted Distance: ", combined_distances[k_nearest_indices[class2_count - k + length(distances_class1)]]))
}
}
# 1. 1NN-classifier
result_point1_1NN <- kNN_classifier(point1, 1, class1_points, class2_points)
result_point2_1NN <- kNN_classifier(point2, 1, class1_points, class2_points)
print(paste("1NN-classifier for (16, 2):", result_point1_1NN))
print(paste("1NN-classifier for (6, 11):", result_point2_1NN))
# 2. 3NN-classifier
result_point1_3NN <- kNN_classifier(point1, 3, class1_points, class2_points)
result_point2_3NN <- kNN_classifier(point2, 3, class1_points, class2_points)
print(paste("3NN-classifier for (16, 2):", result_point1_3NN))
print(paste("3NN-classifier for (6, 11):", result_point2_3NN))
# 3. Distance-weighted (inversely quadratic) voting 3NN-classifier
result_point1_3NN_weighted <- weighted_kNN_classifier(point1, 3, class1_points, class2_points)
result_point2_3NN_weighted <- weighted_kNN_classifier(point2, 3, class1_points, class2_points)
print(paste("Distance-weighted 3NN-classifier for (16, 2):", result_point1_3NN_weighted))
print(paste("Distance-weighted 3NN-classifier for (6, 11):", result_point2_3NN_weighted))
# 4. Distance-weighted (inversely quadratic) voting 7NN-classifier
result_point1_7NN_weighted <- weighted_kNN_classifier(point1, 7, class1_points, class2_points)
result_point2_7NN_weighted <- weighted_kNN_classifier(point2, 7, class1_points, class2_points)
print(paste("Distance-weighted 7NN-classifier for (16, 2):", result_point1_7NN_weighted))
print(paste("Distance-weighted 7NN-classifier for (6, 11):", result_point2_7NN_weighted))
# Training set
class1_points <- matrix(c(11, 13, 8, 9, 7, 7, 15, 11, 11, 10, 9, 7, 5, 3), ncol = 2, byrow = TRUE)
class2_points <- matrix(c(7, 15, 15, 13, 14, 9, 11, 11, 9, 7, 5, 4, 3, 3), ncol = 2, byrow = TRUE)
# New points
point1 <- c(16, 2)
point2 <- c(6, 11)
# Function to calculate Euclidean distance
euclidean_distance <- function(p1, p2) {
sqrt(sum((p1 - p2)^2))
}
# kNN classifier
kNN_classifier <- function(new_point, k, class1_points, class2_points) {
distances_class1 <- apply(class1_points, 1, function(p) euclidean_distance(new_point, p))
distances_class2 <- apply(class2_points, 1, function(p) euclidean_distance(new_point, p))
combined_distances <- c(distances_class1, distances_class2)
sorted_indices <- order(combined_distances)
k_nearest_indices <- sorted_indices[1:k]
class1_count <- sum(k_nearest_indices <= length(distances_class1))
class2_count <- k - class1_count
if (class1_count > class2_count) {
return(paste0("C1:", k_nearest_indices[class1_count], " Distance: ", combined_distances[k_nearest_indices[class1_count]]))
} else {
return(paste0("C2:", k_nearest_indices[class2_count], " Distance: ", combined_distances[k_nearest_indices[class2_count]]))
}
}
# Distance-weighted (inversely quadratic) voting kNN classifier
weighted_kNN_classifier <- function(new_point, k, class1_points, class2_points) {
distances_class1 <- apply(class1_points, 1, function(p) 1 / euclidean_distance(new_point, p)^2)
distances_class2 <- apply(class2_points, 1, function(p) 1 / euclidean_distance(new_point, p)^2)
combined_distances <- c(distances_class1, distances_class2)
sorted_indices <- order(combined_distances, decreasing = TRUE)
k_nearest_indices <- sorted_indices[1:k]
class1_weighted_sum <- sum(distances_class1[k_nearest_indices])
class2_weighted_sum <- sum(distances_class2[k_nearest_indices])
if (class1_weighted_sum > class2_weighted_sum) {
return(paste0("C1:", k_nearest_indices, " Weighted Distance: ", combined_distances[k_nearest_indices]))
} else {
return(paste0("C2:", k_nearest_indices - length(distances_class1), " Weighted Distance: ", combined_distances[k_nearest_indices]))
}
}
# 1. 1NN-classifier
result_point1_1NN <- kNN_classifier(point1, 1, class1_points, class2_points)
result_point2_1NN <- kNN_classifier(point2, 1, class1_points, class2_points)
print(paste("1NN-classifier for (16, 2):", result_point1_1NN))
print(paste("1NN-classifier for (6, 11):", result_point2_1NN))
# 2. 3NN-classifier
result_point1_3NN <- kNN_classifier(point1, 3, class1_points, class2_points)
result_point2_3NN <- kNN_classifier(point2, 3, class1_points, class2_points)
print(paste("3NN-classifier for (16, 2):", result_point1_3NN))
print(paste("3NN-classifier for (6, 11):", result_point2_3NN))
# 3. Distance-weighted (inversely quadratic) voting 3NN-classifier
result_point1_3NN_weighted <- weighted_kNN_classifier(point1, 3, class1_points, class2_points)
# Training set
class1_points <- matrix(c(11, 13, 8, 9, 7, 7, 15, 11, 11, 10, 9, 7, 5, 3), ncol = 2, byrow = TRUE)
class2_points <- matrix(c(7, 15, 15, 13, 14, 9, 11, 11, 9, 7, 5, 4, 3, 3), ncol = 2, byrow = TRUE)
# New points
point1 <- c(16, 2)
point2 <- c(6, 11)
# Function to calculate Euclidean distance
euclidean_distance <- function(p1, p2) {
sqrt(sum((p1 - p2)^2))
}
# kNN classifier
kNN_classifier <- function(new_point, k, class1_points, class2_points) {
distances_class1 <- apply(class1_points, 1, function(p) euclidean_distance(new_point, p))
distances_class2 <- apply(class2_points, 1, function(p) euclidean_distance(new_point, p))
combined_distances <- c(distances_class1, distances_class2)
sorted_indices <- order(combined_distances)
k_nearest_indices <- sorted_indices[1:k]
class1_count <- sum(k_nearest_indices <= length(distances_class1))
class2_count <- k - class1_count
if (class1_count > class2_count) {
return(paste0("C1:", k_nearest_indices[class1_count], " Distance: ", combined_distances[k_nearest_indices[class1_count]]))
} else {
return(paste0("C2:", k_nearest_indices[class2_count], " Distance: ", combined_distances[k_nearest_indices[class2_count]]))
}
}
# Distance-weighted (inversely quadratic) voting kNN classifier
weighted_kNN_classifier <- function(new_point, k, class1_points, class2_points) {
distances_class1 <- apply(class1_points, 1, function(p) 1 / euclidean_distance(new_point, p)^2)
distances_class2 <- apply(class2_points, 1, function(p) 1 / euclidean_distance(new_point, p)^2)
combined_distances <- c(distances_class1, distances_class2)
sorted_indices <- order(combined_distances, decreasing = TRUE)
k_nearest_indices <- sorted_indices[1:k]
class1_weighted_sum <- sum(distances_class1[k_nearest_indices])
class2_weighted_sum <- sum(distances_class2[k_nearest_indices])
if (class1_weighted_sum > class2_weighted_sum) {
return(paste0("C1:", k_nearest_indices, " Weighted Distance: ", combined_distances[k_nearest_indices]))
} else {
return(paste0("C2:", k_nearest_indices - length(distances_class1), " Weighted Distance: ", combined_distances[k_nearest_indices]))
}
}
# 1. 1NN-classifier
result_point1_1NN <- kNN_classifier(point1, 1, class1_points, class2_points)
result_point2_1NN <- kNN_classifier(point2, 1, class1_points, class2_points)
print(paste("1NN-classifier for (16, 2):", result_point1_1NN))
print(paste("1NN-classifier for (6, 11):", result_point2_1NN))
# 2. 3NN-classifier
result_point1_3NN <- kNN_classifier(point1, 3, class1_points, class2_points)
result_point2_3NN <- kNN_classifier(point2, 3, class1_points, class2_points)
print(paste("3NN-classifier for (16, 2):", result_point1_3NN))
print(paste("3NN-classifier for (6, 11):", result_point2_3NN))
# 3. Distance-weighted (inversely quadratic) voting 3NN-classifier
result_point1_3NN_weighted <- weighted_kNN_classifier(point1, 3, class1_points, class2_points)
# Training set
class1_points <- matrix(c(11, 13, 8, 9, 7, 7, 15, 11, 11, 10, 9, 7, 5, 3), ncol = 2, byrow = TRUE)
class2_points <- matrix(c(7, 15, 15, 13, 14, 9, 11, 11, 9, 7, 5, 4, 3, 3), ncol = 2, byrow = TRUE)
# New points
point1 <- c(16, 2)
point2 <- c(6, 11)
# Function to calculate Euclidean distance
euclidean_distance <- function(p1, p2) {
sqrt(sum((p1 - p2)^2))
}
# kNN classifier
kNN_classifier <- function(new_point, k, class1_points, class2_points) {
distances_class1 <- apply(class1_points, 1, function(p) euclidean_distance(new_point, p))
distances_class2 <- apply(class2_points, 1, function(p) euclidean_distance(new_point, p))
combined_distances <- c(distances_class1, distances_class2)
sorted_indices <- order(combined_distances)
k_nearest_indices <- sorted_indices[1:k]
class1_count <- sum(k_nearest_indices <= length(distances_class1))
class2_count <- k - class1_count
if (class1_count > class2_count) {
return(paste0("C1:", k_nearest_indices[class1_count], " Distance: ", combined_distances[k_nearest_indices[class1_count]]))
} else {
return(paste0("C2:", k_nearest_indices[class2_count], " Distance: ", combined_distances[k_nearest_indices[class2_count]]))
}
}
# Distance-weighted (inversely quadratic) voting kNN classifier
weighted_kNN_classifier <- function(new_point, k, class1_points, class2_points) {
distances_class1 <- apply(class1_points, 1, function(p) 1 / euclidean_distance(new_point, p)^2)
distances_class2 <- apply(class2_points, 1, function(p) 1 / euclidean_distance(new_point, p)^2)
combined_distances <- c(distances_class1, distances_class2)
sorted_indices <- order(combined_distances, decreasing = TRUE)
k_nearest_indices <- sorted_indices[1:k]
class1_weighted_sum <- sum(distances_class1[k_nearest_indices], na.rm = TRUE)
class2_weighted_sum <- sum(distances_class2[k_nearest_indices], na.rm = TRUE)
if (is.na(class1_weighted_sum) || is.na(class2_weighted_sum)) {
return("Insufficient neighbors for classification")
}
if (class1_weighted_sum > class2_weighted_sum) {
return(paste0("C1:", k_nearest_indices[1:length(distances_class1)], " Weighted Distance: ", combined_distances[k_nearest_indices[1:length(distances_class1)]]))
} else {
return(paste0("C2:", k_nearest_indices[length(distances_class1) + 1:k], " Weighted Distance: ", combined_distances[k_nearest_indices[length(distances_class1) + 1:k]]))
}
}
# 1. 1NN-classifier
result_point1_1NN <- kNN_classifier(point1, 1, class1_points, class2_points)
result_point2_1NN <- kNN_classifier(point2, 1, class1_points, class2_points)
print(paste("1NN-classifier for (16, 2):", result_point1_1NN))
print(paste("1NN-classifier for (6, 11):", result_point2_1NN))
# 2. 3NN-classifier
result_point1_3NN <- kNN_classifier(point1, 3, class1_points, class2_points)
result_point2_3NN <- kNN_classifier(point2, 3, class1_points, class2_points)
print(paste("3NN-classifier for (16, 2):", result_point1_3NN))
print(paste("3NN-classifier for (6, 11):", result_point2_3NN))
# 3. Distance-weighted (inversely quadratic) voting 3NN-classifier
result_point1_3NN_weighted <- weighted_kNN_classifier(point1, 3, class1_points, class2_points)
result_point2_3NN_weighted <- weighted_kNN_classifier(point2, 3, class1_points, class2_points)
print(paste("Distance-weighted 3NN-classifier for (16, 2):", result_point1_3NN_weighted))
print(paste("Distance-weighted 3NN-classifier for (6, 11):", result_point2_3NN_weighted))
# 4. Distance-weighted (inversely quadratic) voting 7NN-classifier
result_point1_7NN_weighted <- weighted_kNN_classifier(point1, 7, class1_points, class2_points)
result_point2_7NN_weighted <- weighted_kNN_classifier(point2, 7, class1_points, class2_points)
print(paste("Distance-weighted 7NN-classifier for (16, 2):", result_point1_7NN_weighted))
print(paste("Distance-weighted 7NN-classifier for (6, 11):", result_point2_7NN_weighted))
# Define a function for k-NN classification with optional weighted flag
knn_classifier <- function(train, test_point, k, weighted = FALSE) {
# Calculate Euclidean distances between the test point and all training points
distances <- sqrt(rowSums((train - test_point)^2))
# Find the indices of the k-nearest neighbors
nearest_indices <- order(distances)[1:k]
# Extract the corresponding classes of the k-nearest neighbors
nearest_classes <- cl[nearest_indices]
if (weighted) {
# Calculate inversely quadratic weights for distances
weights <- 1 / (distances[nearest_indices]^2)
# Return the class label with weighted voting
weighted_label <- names(sort(tapply(weights, nearest_classes, sum), decreasing = TRUE)[1])
return(c(nearest_indices, distances[nearest_indices], weights, weighted_label))
} else {
# Return the class label that occurs most frequently among the k-nearest neighbors
return(c(nearest_indices, distances[nearest_indices], names(sort(table(nearest_classes), decreasing = TRUE)[1])))
}
}
# Define the training set
class1_points <- cbind(c(11, 13, 8, 9, 7, 7, 15), c(11, 11, 10, 9, 7, 5, 3))
class2_points <- cbind(c(7, 15, 15, 13, 14, 9, 11), c(11, 9, 7, 5, 4, 3, 3))
train <- rbind(class1_points, class2_points)
# Define the classes
cl <- factor(c(rep("Class 1", 7), rep("Class 2", 7)))
# Test points
test_point1 <- c(16, 2)
test_point2 <- c(6, 11)
# 1NN-classifier
result_1nn_1 <- knn_classifier(train, test_point1, k = 1)
result_1nn_2 <- knn_classifier(train, test_point2, k = 1)
# 3NN-classifier
result_3nn_1 <- knn_classifier(train, test_point1, k = 3)
result_3nn_2 <- knn_classifier(train, test_point2, k = 3)
# Distance-weighted 3NN-classifier
result_weighted_3nn_1 <- knn_classifier(train, test_point1, k = 3, weighted = TRUE)
result_weighted_3nn_2 <- knn_classifier(train, test_point2, k = 3, weighted = TRUE)
# Distance-weighted 7NN-classifier
result_weighted_7nn_1 <- knn_classifier(train, test_point1, k = 7, weighted = TRUE)
result_weighted_7nn_2 <- knn_classifier(train, test_point2, k = 7, weighted = TRUE)
# Output results
cat("1. 1NN-classifier label for (16, 2): C", result_1nn_1[length(result_1nn_1)-1], result_1nn_1[1], ":", result_1nn_1[length(result_1nn_1)], "\n")
cat("   Distance:", result_1nn_1[length(result_1nn_1)], "\n\n")
cat("1. 1NN-classifier label for (6, 11): C", result_1nn_2[length(result_1nn_2)-1], result_1nn_2[1], ":", result_1nn_2[length(result_1nn_2)], "\n")
cat("   Distance:", result_1nn_2[length(result_1nn_2)], "\n\n")
cat("2. 3NN-classifier label for (16, 2): C", result_3nn_1[length(result_3nn_1)-1], " (", paste("C", result_3nn_1[1], ":", result_3nn_1[length(result_3nn_1)], collapse = ", "), ")\n")
cat("   3 Nearest Points:", paste("C", result_3nn_1[1], ":", result_3nn_1[length(result_3nn_1)], collapse = ", "), "\n")
cat("   Corresponding Distances:", paste(result_3nn_1[length(result_3nn_1)], collapse = ", "), "\n\n")
cat("2. 3NN-classifier label for (6, 11): C", result_3nn_2[length(result_3nn_2)-1], " (", paste("C", result_3nn_2[1], ":", result_3nn_2[length(result_3nn_2)], collapse = ", "), ")\n")
cat("   3 Nearest Points:", paste("C", result_3nn_2[1], ":", result_3nn_2[length(result_3nn_2)], collapse = ", "), "\n")
cat("   Corresponding Distances:", paste(result_3nn_2[length(result_3nn_2)], collapse = ", "), "\n\n")
cat("3. Distance-weighted 3NN-classifier label for (16, 2): C", result_weighted_3nn_1[length(result_weighted_3nn_1)-2], " (", paste("C", result_weighted_3nn_1[1], ":", result_weighted_3nn_1[length(result_weighted_3nn_1)-1], collapse = ", "), ")\n")
cat("   3 Nearest Points:", paste("C", result_weighted_3nn_1[1], ":", result_weighted_3nn_1[length(result_weighted_3nn_1)-1], collapse = ", "), "\n")
cat("   Corresponding Weighted Distances:", paste(result_weighted_3nn_1[length(result_weighted_3nn_1)-1], collapse = ", "), "\n\n")
cat("3. Distance-weighted 3NN-classifier label for (6, 11): C", result_weighted_3nn_2[length(result_weighted_3nn_2)-2], " (", paste("C", result_weighted_3nn_2[1], ":", result_weighted_3nn_2[length(result_weighted_3nn_2)-1], collapse = ", "), ")\n")
cat("   3 Nearest Points:", paste("C", result_weighted_3nn_2[1], ":", result_weighted_3nn_2[length(result_weighted_3nn_2)-1], collapse = ", "), "\n")
cat("   Corresponding Weighted Distances:", paste(result_weighted_3nn_2[length(result_weighted_3nn_2)-1], collapse = ", "), "\n\n")
cat("4. Distance-weighted 7NN-classifier label for (16, 2): C", result_weighted_7nn_1[length(result_weighted_7nn_1)-2], " (", paste("C", result_weighted_7nn_1[1], ":", result_weighted_7nn_1[length(result_weighted_7nn_1)-1], collapse = ", "), ")\n")
cat("   7 Nearest Points:", paste("C", result_weighted_7nn_1[1], ":", result_weighted_7nn_1[length(result_weighted_7nn_1)-1], collapse = ", "), "\n")
cat("   Corresponding Weighted Distances:", paste(result_weighted_7nn_1[length(result_weighted_7nn_1)-1], collapse = ", "), "\n\n")
cat("4. Distance-weighted 7NN-classifier label for (6, 11): C", result_weighted_7nn_2[length(result_weighted_7nn_2)-2], " (", paste("C", result_weighted_7nn_2[1], ":", result_weighted_7nn_2[length(result_weighted_7nn_2)-1], collapse = ", "), ")\n")
cat("   7 Nearest Points:", paste("C", result_weighted_7nn_2[1], ":", result_weighted_7nn_2[length(result_weighted_7nn_2)-1], collapse = ", "), "\n")
cat("   Corresponding Weighted Distances:", paste(result_weighted_7nn_2[length(result_weighted_7nn_2)-1], collapse = ", "), "\n")
# Training set
class1_points <- matrix(c(11, 13, 8, 9, 7, 7, 15, 11, 11, 10, 9, 7, 5, 3), ncol = 2, byrow = TRUE)
class2_points <- matrix(c(7, 15, 15, 13, 14, 9, 11, 11, 9, 7, 5, 4, 3, 3), ncol = 2, byrow = TRUE)
# New points
point1 <- c(16, 2)
point2 <- c(6, 11)
# Function to calculate Euclidean distance
euclidean_distance <- function(p1, p2) {
sqrt(sum((p1 - p2)^2))
}
# kNN classifier
kNN_classifier <- function(new_point, k, class1_points, class2_points) {
distances_class1 <- apply(class1_points, 1, function(p) euclidean_distance(new_point, p))
distances_class2 <- apply(class2_points, 1, function(p) euclidean_distance(new_point, p))
combined_distances <- c(distances_class1, distances_class2)
sorted_indices <- order(combined_distances)
k_nearest_indices <- sorted_indices[1:k]
class1_count <- sum(k_nearest_indices <= length(distances_class1))
class2_count <- k - class1_count
if (class1_count > class2_count) {
return(paste0("C1:", k_nearest_indices[class1_count], " Distance: ", combined_distances[k_nearest_indices[class1_count]]))
} else {
return(paste0("C2:", k_nearest_indices[class2_count], " Distance: ", combined_distances[k_nearest_indices[class2_count]]))
}
}
# Distance-weighted (inversely quadratic) voting kNN classifier
weighted_kNN_classifier <- function(new_point, k, class1_points, class2_points) {
distances_class1 <- apply(class1_points, 1, function(p) 1 / euclidean_distance(new_point, p)^2)
distances_class2 <- apply(class2_points, 1, function(p) 1 / euclidean_distance(new_point, p)^2)
combined_distances <- c(distances_class1, distances_class2)
sorted_indices <- order(combined_distances, decreasing = TRUE)
k_nearest_indices <- sorted_indices[1:k]
class1_weighted_sum <- sum(distances_class1[k_nearest_indices], na.rm = TRUE)
class2_weighted_sum <- sum(distances_class2[k_nearest_indices], na.rm = TRUE)
if (is.na(class1_weighted_sum) || is.na(class2_weighted_sum)) {
return("Insufficient neighbors for classification")
}
if (class1_weighted_sum > class2_weighted_sum) {
return(paste0("C1:", k_nearest_indices[1:length(distances_class1)], " Weighted Distance: ", combined_distances[k_nearest_indices[1:length(distances_class1)]]))
} else {
return(paste0("C2:", k_nearest_indices[length(distances_class1) + 1:k], " Weighted Distance: ", combined_distances[k_nearest_indices[length(distances_class1) + 1:k]]))
}
}
# 1. 1NN-classifier
result_point1_1NN <- kNN_classifier(point1, 1, class1_points, class2_points)
result_point2_1NN <- kNN_classifier(point2, 1, class1_points, class2_points)
print(paste("1NN-classifier for (16, 2):", result_point1_1NN))
print(paste("1NN-classifier for (6, 11):", result_point2_1NN))
# 2. 3NN-classifier
result_point1_3NN <- kNN_classifier(point1, 3, class1_points, class2_points)
result_point2_3NN <- kNN_classifier(point2, 3, class1_points, class2_points)
print(paste("3NN-classifier for (16, 2):", result_point1_3NN))
print(paste("3NN-classifier for (6, 11):", result_point2_3NN))
# 3. Distance-weighted (inversely quadratic) voting 3NN-classifier
result_point1_3NN_weighted <- weighted_kNN_classifier(point1, 3, class1_points, class2_points)
result_point2_3NN_weighted <- weighted_kNN_classifier(point2, 3, class1_points, class2_points)
print(paste("Distance-weighted 3NN-classifier for (16, 2):", result_point1_3NN_weighted))
print(paste("Distance-weighted 3NN-classifier for (6, 11):", result_point2_3NN_weighted))
# 4. Distance-weighted (inversely quadratic) voting 7NN-classifier
result_point1_7NN_weighted <- weighted_kNN_classifier(point1, 7, class1_points, class2_points)
result_point2_7NN_weighted <- weighted_kNN_classifier(point2, 7, class1_points, class2_points)
print(paste("Distance-weighted 7NN-classifier for (16, 2):", result_point1_7NN_weighted))
print(paste("Distance-weighted 7NN-classifier for (6, 11):", result_point2_7NN_weighted))
# Define the training set
class_1_points <- matrix(c(11, 13, 8, 9, 7, 7, 15, 11, 11, 10, 9, 9, 7, 5, 3), ncol = 2, byrow = TRUE)
class_2_points <- matrix(c(7, 15, 15, 13, 14, 9, 11, 11, 9, 5, 7, 3, 3, 3), ncol = 2, byrow = TRUE)
# Define points to classify
points_to_classify <- matrix(c(16, 2, 6, 11, 2, 3, 3, 4, 4, 2), ncol = 2, byrow = TRUE)
# Function to calculate Euclidean distance
euclidean_distance <- function(a, b) {
sqrt(sum((a - b)^2))
}
# Function to calculate k nearest neighbors
k_nearest_neighbors <- function(distances, k) {
sorted_indices <- order(unlist(distances))
nearest_indices <- sorted_indices[1:k]
return(nearest_indices)
}
# Function to calculate inverse quadratic weights
inverse_quadratic_weights <- function(distances) {
weights <- 1 / distances^2
return(weights)
}
# Loop through each point for classification
for (point in 1:nrow(points_to_classify)) {
# Calculate distances for the point
distances_1 <- sapply(1:nrow(class_1_points), function(i) euclidean_distance(points_to_classify[point, ], class_1_points[i, ]))
distances_2 <- sapply(1:nrow(class_2_points), function(i) euclidean_distance(points_to_classify[point, ], class_2_points[i, ]))
# Nearest neighbors for 1NN classifier
nearest_1_class <- ifelse(which.min(distances_1) <= nrow(class_1_points), "C1", "C2")
nearest_1_index <- ifelse(which.min(distances_1) <= nrow(class_1_points), which.min(distances_1), which.min(distances_2) - nrow(class_1_points))
nearest_1_distance <- min(min(distances_1), min(distances_2))
# Find k nearest neighbors for 3NN classifier
nearest_3 <- k_nearest_neighbors(c(distances_1, distances_2), 3)
nearest_3_class <- ifelse(nearest_3 <= nrow(class_1_points), "C1", "C2")
nearest_3_indices <- ifelse(nearest_3 <= nrow(class_1_points), nearest_3, nearest_3 - nrow(class_1_points))
nearest_3_distances <- ifelse(nearest_3 <= nrow(class_1_points), distances_1[nearest_3], distances_2[nearest_3 - nrow(class_1_points)])
# Calculate inverse quadratic weights for V-classifier with 3 nearest points
weights_3 <- inverse_quadratic_weights(c(distances_1[nearest_3], distances_2[nearest_3]))
# Output for 1NN and 3NN classifiers
cat("\n\nPoint", point, "1NN-classifier:")
cat("\nNearest point:", nearest_1_class, ":", nearest_1_index, "Distance:", nearest_1_distance)
cat("\n3NN-classifier:")
cat("\nNearest points:")
for (i in 1:3) {
cat("\n", nearest_3_class[i], ":", nearest_3_indices[i], "Distance:", nearest_3_distances[i])
}
# Output for distance-weighted voting with 3 nearest points
cat("\nDistance-weighted (inversely quadratic) voting 3N V-classifier:")
cat("\nWeighted distances:")
for (i in 1:3) {
cat("\nWeight:", weights_3[i], "Distance:", nearest_3_distances[i])
}
}
# Define a function for k-NN classification with optional weighted flag
knn_classifier <- function(train, test_point, k, weighted = FALSE) {
# Calculate Euclidean distances between the test point and all training points
distances <- sqrt(rowSums((train - test_point)^2))
# Find the indices of the k-nearest neighbors
nearest_indices <- order(distances)[1:k]
# Extract the corresponding classes of the k-nearest neighbors
nearest_classes <- cl[nearest_indices]
if (weighted) {
# Calculate inversely quadratic weights for distances
weights <- 1 / (distances[nearest_indices]^2)
# Return the class label with weighted voting
weighted_label <- names(sort(tapply(weights, nearest_classes, sum), decreasing = TRUE)[1])
return(c(nearest_indices, distances[nearest_indices], weights, weighted_label))
} else {
# Return the class label that occurs most frequently among the k-nearest neighbors
return(c(nearest_indices, distances[nearest_indices], names(sort(table(nearest_classes), decreasing = TRUE)[1])))
}
}
# Define the training set
class1_points <- cbind(c(11, 13, 8, 9, 7, 7, 15), c(11, 11, 10, 9, 7, 5, 3))
class2_points <- cbind(c(7, 15, 15, 13, 14, 9, 11), c(11, 9, 7, 5, 4, 3, 3))
train <- rbind(class1_points, class2_points)
# Define the classes
cl <- factor(c(rep("Class 1", 7), rep("Class 2", 7)))
# Test points
test_point1 <- c(16, 2)
test_point2 <- c(6, 11)
# 1NN-classifier
result_1nn_1 <- knn_classifier(train, test_point1, k = 1)
result_1nn_2 <- knn_classifier(train, test_point2, k = 1)
# 3NN-classifier
result_3nn_1 <- knn_classifier(train, test_point1, k = 3)
result_3nn_2 <- knn_classifier(train, test_point2, k = 3)
# Distance-weighted 3NN-classifier
result_weighted_3nn_1 <- knn_classifier(train, test_point1, k = 3, weighted = TRUE)
result_weighted_3nn_2 <- knn_classifier(train, test_point2, k = 3, weighted = TRUE)
# Distance-weighted 7NN-classifier
result_weighted_7nn_1 <- knn_classifier(train, test_point1, k = 7, weighted = TRUE)
result_weighted_7nn_2 <- knn_classifier(train, test_point2, k = 7, weighted = TRUE)
# Output results
cat("1. 1NN-classifier label for (16, 2): C", result_1nn_1[length(result_1nn_1)-1], result_1nn_1[1], ":", result_1nn_1[length(result_1nn_1)], "\n")
cat("   Distance:", result_1nn_1[length(result_1nn_1)], "\n\n")
cat("1. 1NN-classifier label for (6, 11): C", result_1nn_2[length(result_1nn_2)-1], result_1nn_2[1], ":", result_1nn_2[length(result_1nn_2)], "\n")
cat("   Distance:", result_1nn_2[length(result_1nn_2)], "\n\n")
cat("2. 3NN-classifier label for (16, 2): C", result_3nn_1[length(result_3nn_1)-1], " (", paste("C", result_3nn_1[1], ":", result_3nn_1[length(result_3nn_1)], collapse = ", "), ")\n")
cat("   3 Nearest Points:", paste("C", result_3nn_1[1], ":", result_3nn_1[length(result_3nn_1)], collapse = ", "), "\n")
cat("   Corresponding Distances:", paste(result_3nn_1[length(result_3nn_1)], collapse = ", "), "\n\n")
cat("2. 3NN-classifier label for (6, 11): C", result_3nn_2[length(result_3nn_2)-1], " (", paste("C", result_3nn_2[1], ":", result_3nn_2[length(result_3nn_2)], collapse = ", "), ")\n")
cat("   3 Nearest Points:", paste("C", result_3nn_2[1], ":", result_3nn_2[length(result_3nn_2)], collapse = ", "), "\n")
cat("   Corresponding Distances:", paste(result_3nn_2[length(result_3nn_2)], collapse = ", "), "\n\n")
cat("3. Distance-weighted 3NN-classifier label for (16, 2): C", result_weighted_3nn_1[length(result_weighted_3nn_1)-2], " (", paste("C", result_weighted_3nn_1[1], ":", result_weighted_3nn_1[length(result_weighted_3nn_1)-1], collapse = ", "), ")\n")
cat("   3 Nearest Points:", paste("C", result_weighted_3nn_1[1], ":", result_weighted_3nn_1[length(result_weighted_3nn_1)-1], collapse = ", "), "\n")
cat("   Corresponding Weighted Distances:", paste(result_weighted_3nn_1[length(result_weighted_3nn_1)-1], collapse = ", "), "\n\n")
cat("3. Distance-weighted 3NN-classifier label for (6, 11): C", result_weighted_3nn_2[length(result_weighted_3nn_2)-2], " (", paste("C", result_weighted_3nn_2[1], ":", result_weighted_3nn_2[length(result_weighted_3nn_2)-1], collapse = ", "), ")\n")
cat("   3 Nearest Points:", paste("C", result_weighted_3nn_2[1], ":", result_weighted_3nn_2[length(result_weighted_3nn_2)-1], collapse = ", "), "\n")
cat("   Corresponding Weighted Distances:", paste(result_weighted_3nn_2[length(result_weighted_3nn_2)-1], collapse = ", "), "\n\n")
cat("4. Distance-weighted 7NN-classifier label for (16, 2): C", result_weighted_7nn_1[length(result_weighted_7nn_1)-2], " (", paste("C", result_weighted_7nn_1[1], ":", result_weighted_7nn_1[length(result_weighted_7nn_1)-1], collapse = ", "), ")\n")
cat("   7 Nearest Points:", paste("C", result_weighted_7nn_1[1], ":", result_weighted_7nn_1[length(result_weighted_7nn_1)-1], collapse = ", "), "\n")
cat("   Corresponding Weighted Distances:", paste(result_weighted_7nn_1[length(result_weighted_7nn_1)-1], collapse = ", "), "\n\n")
cat("4. Distance-weighted 7NN-classifier label for (6, 11): C", result_weighted_7nn_2[length(result_weighted_7nn_2)-2], " (", paste("C", result_weighted_7nn_2[1], ":", result_weighted_7nn_2[length(result_weighted_7nn_2)-1], collapse = ", "), ")\n")
cat("   7 Nearest Points:", paste("C", result_weighted_7nn_2[1], ":", result_weighted_7nn_2[length(result_weighted_7nn_2)-1], collapse = ", "), "\n")
cat("   Corresponding Weighted Distances:", paste(result_weighted_7nn_2[length(result_weighted_7nn_2)-1], collapse = ", "), "\n")
